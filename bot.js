const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const puppeteer = require('puppeteer');
const path = require('path');
const { imageSize } = require('image-size');
const axios = require('axios');
require('dotenv').config();

// Telegram botni ishga tushirish
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const sessions = new Map();

// Set webhook
const WEBHOOK_URL = `https://patent-chek.vercel.app/api/telegram`;
bot.setWebHook(WEBHOOK_URL);

// Til sozlamalari
const languages = {
    uz: {
        welcome: "ü§ñ Assalomu alaykum!\n\nüåü <b>Patent to'lov cheki yaratuvchi bot</b>ga xush kelibsiz!\n\nüìã Avval eski patent chekingizni PDF formatida yuboring.\n‚ö†Ô∏è <i>Fayl nomi \"–î–æ–∫—É–º–µ–Ω—Ç-\" bilan boshlanishi shart</i>",
        selectLanguage: "üåê <b>Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>",
        langSelected: "‚úÖ <b>O'zbek tili tanlandi!</b>\n\nüìÑ Endi eski patent chekingizni PDF formatida yuboring.",
        invalidFile: "‚ùå <b>Xatolik!</b>\n\nüìõ Siz yuborgan fayl patent to'lov cheki emas!\n\nüí° <i>Fayl nomi \"–î–æ–∫—É–º–µ–Ω—Ç-\" bilan boshlanishi kerak</i>",
        fileAccepted: "‚úÖ <b>Patent chek muvaffaqiyatli qabul qilindi!</b>\n\nüìÖ <b>Qaysi oy uchun to'lov qilmoqchisiz?</b>\n\nüìù <i>Formatda kiriting:</i>\n<code>11 –∏—é–ª—è 2025 16:17:50 –º—Å–∫</code>",
        enterName: "üë§ <b>To'liq ismingizni kiriting:</b>\n\nüìù <i>Familiya Ism Otchestvo formatida</i>\n\nüîπ Masalan: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>",
        enterAmount: "üí∞ <b>To'lov summasini kiriting:</b>\n\nüìù <i>Har qanday formatda yozing:</i>\nüîπ <code>8900</code>\nüîπ <code>8 900</code>\nüîπ <code>8 900,00</code>\nüîπ <code>8 900,00 ‚ÇΩ</code>\nüîπ <code>17000</code> yoki <code>17 000</code>\n\nü§ñ <i>Bot avtomatik tozalab oladi!</i>",
        processing: "‚è≥ <b>PDF hujjat tayyorlanmoqda...</b>\n\nüîÑ <i>Iltimos, biroz kuting</i>",
        success: "üéâ <b>Muvaffaqiyat!</b>\n\n‚úÖ PDF chek tayyor bo'ldi va sizga yuborildi!\n\n‚ö†Ô∏è <b>MUHIM ESLATMA:</b>\nüö® <i>Sizga berilgan chekni Rossiya politsiyasi qo'liga topshirmang!</i>\nüõ°Ô∏è <i>Bot javobgarlikni o'z bo'yniga olmaydi</i>\n\nüîß <b>Hozirgi kunda:</b>\nüë®‚Äçüíª Dasturchilar bot ustida faol ishlashmoqda\n‚ú® Bot original cheklar chiqarib beradi\nüì± Bizdan uzoqlashmang va botimizni musofir do'stlaringizga ulashing!\n\nüîÑ <b>Yangi chek uchun /start bosing</b>",
        error: "‚ùå <b>Xatolik yuz berdi!</b>\n\nüîÑ Iltimos, qayta urinib ko'ring yoki /start bosib qaytadan boshlang",
        restart: "\n\nüîÑ <b>Qaytadan boshlash uchun /start ni bosing</b>"
    },
    ru: {
        welcome: "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüåü <b>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤ –ø–∞—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\nüìã –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—ã–π —á–µ–∫ –ø–∞—Ç–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n‚ö†Ô∏è <i>–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"–î–æ–∫—É–º–µ–Ω—Ç-\"</i>",
        selectLanguage: "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:</b>",
        langSelected: "‚úÖ <b>–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω!</b>\n\nüìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—ã–π —á–µ–∫ –ø–∞—Ç–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
        invalidFile: "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\nüìõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–µ–∫–æ–º –ø–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞!\n\nüí° <i>–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"–î–æ–∫—É–º–µ–Ω—Ç-\"</i>",
        fileAccepted: "‚úÖ <b>–ß–µ–∫ –ø–∞—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!</b>\n\nüìÖ <b>–ó–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂?</b>\n\nüìù <i>–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</i>\n<code>11 –∏—é–ª—è 2025 16:17:50 –º—Å–∫</code>",
        enterName: "üë§ <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:</b>\n\nüìù <i>–í —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</i>\n\nüîπ –ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>",
        enterAmount: "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:</b>\n\nüìù <i>–ü–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>\nüîπ <code>8900</code>\nüîπ <code>8 900</code>\nüîπ <code>8 900,00</code>\nüîπ <code>8 900,00 ‚ÇΩ</code>\nüîπ <code>17000</code> –∏–ª–∏ <code>17 000</code>\n\nü§ñ <i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç!</i>",
        processing: "‚è≥ <b>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç...</b>\n\nüîÑ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</i>",
        success: "üéâ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n‚úÖ PDF —á–µ–∫ –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º!\n\n‚ö†Ô∏è <b>–í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b>\nüö® <i>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ–∫ –≤ —Ä—É–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø–æ–ª–∏—Ü–∏–∏!</i>\nüõ°Ô∏è <i>–ë–æ—Ç –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</i>\n\nüîß <b>–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è:</b>\nüë®‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –±–æ—Ç–æ–º\n‚ú® –ë–æ—Ç –≤—ã–¥–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏\nüì± –ù–µ –æ—Ç–¥–∞–ª—è–π—Ç–µ—Å—å –æ—Ç –Ω–∞—Å –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏-–º–∏–≥—Ä–∞–Ω—Ç–∞–º–∏!\n\nüîÑ <b>–î–ª—è –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start</b>",
        error: "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\nüîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞",
        restart: "\n\nüîÑ <b>–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start</b>"
    }
};

// Default rasm (fon) o'lchamlarini olish
const defaultImagePath = path.join(__dirname, 'img', '–î–æ–∫—É–º–µ–Ω—Ç.jpg');
const defaultImageBuffer = fs.readFileSync(defaultImagePath);
const base64DefaultImage = `data:image/jpeg;base64,${defaultImageBuffer.toString('base64')}`;

const dimensions = imageSize(defaultImageBuffer);
const imgWidthPx = dimensions.width;
const imgHeightPx = dimensions.height;
const pxToInch = (px) => px / 96;
const pageWidthIn = pxToInch(imgWidthPx);
const pageHeightIn = pxToInch(imgHeightPx);

// PDF fayllar uchun vaqtinchalik papka
const tempDir = path.join(__dirname, 'temp_pdfs');
if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
}

// Inline keyboard yaratish
function createLanguageKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "üá∫üáø O'zbek tili", callback_data: 'lang_uz' },
                    { text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data: 'lang_ru' }
                ]
            ]
        },
        parse_mode: 'HTML'
    };
}

// dateText ni tahlil qilib YYYY-MM-DD-HH_MM_SS formatiga o'tkazish
function parseDateText(dateText) {
    const months = {
        '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
        '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
        '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
    };

    // Masalan: "11 –∏—é–ª—è 2025 16:17:50 –º—Å–∫"
    const regex = /^(\d{1,2})\s+(\S+)\s+(\d{4})\s+(\d{2}):(\d{2}):(\d{2})\s+–º—Å–∫$/;
    const match = dateText.match(regex);

    if (!match) {
        throw new Error('Invalid date format');
    }

    const [, day, monthText, year, hours, minutes, seconds] = match;
    const month = months[monthText.toLowerCase()];
    if (!month) {
        throw new Error('Invalid month name');
    }

    // YYYY-MM-DD-HH_MM_SS formatida qaytarish
    return `${year}-${month}-${day.padStart(2, '0')}-${hours}_${minutes}_${seconds}`;
}

// Summani tozalash va standartlash
function cleanAmount(amount) {
    // Barcha bo'sh joylar, ruble belgilari va vergullarni olib tashlash
    let cleaned = amount.toString()
        .replace(/\s+/g, '')        // Barcha bo'sh joylarni olib tashlash
        .replace(/‚ÇΩ/g, '')          // Ruble belgisini olib tashlash
        .replace(/,/g, '.')         // Vergulni nuqtaga o'zgartirish
        .replace(/[^\d.]/g, '');    // Faqat raqam va nuqtani qoldirish

    // Agar nuqta bo'lsa, faqat rublni olish (kopeyklarni e'tiborsiz qoldirish)
    if (cleaned.includes('.')) {
        cleaned = cleaned.split('.')[0];
    }

    // Faqat raqamlarni qaytarish
    return cleaned.replace(/\D/g, '');
}

// Summani formatlash (17 000 shaklida)
function formatAmount(amount) {
    const cleanedAmount = cleanAmount(amount);
    const formattedRubles = parseInt(cleanedAmount).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
    return `${formattedRubles},00 ‚ÇΩ`;
}

// Summani so'zga aylantirish
function convertNumberToWords(amount) {
    // Avval summani tozalash
    const cleanedAmount = cleanAmount(amount);
    const rubles = cleanedAmount;
    const kopecks = '00'; // Har doim 00 kopek

    // So'z shaklidagi sonlar uchun lug'atlar
    const ones = [
        '', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å',
        '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',
        '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'
    ];
    const tens = ['', '', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'];
    const hundreds = ['', '—Å—Ç–æ', '–¥–≤–µ—Å—Ç–∏', '—Ç—Ä–∏—Å—Ç–∞', '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', '–ø—è—Ç—å—Å–æ—Ç', '—à–µ—Å—Ç—å—Å–æ—Ç', '—Å–µ–º—å—Å–æ—Ç', '–≤–æ—Å–µ–º—å—Å–æ—Ç', '–¥–µ–≤—è—Ç—å—Å–æ—Ç'];
    const thousands = ['', '—Ç—ã—Å—è—á–∞', '—Ç—ã—Å—è—á–∏', '—Ç—ã—Å—è—á'];

    function convertLessThanThousand(number) {
        if (number === 0) return '';
        if (number < 20) return ones[number];
        if (number < 100) {
            const ten = Math.floor(number / 10);
            const rest = number % 10;
            return `${tens[ten]}${rest ? ' ' + ones[rest] : ''}`;
        }
        const hundred = Math.floor(number / 100);
        const rest = number % 100;
        return `${hundreds[hundred]}${rest ? ' ' + convertLessThanThousand(rest) : ''}`.trim();
    }

    function convertRubles(number) {
        if (number === 0) return '–Ω–æ–ª—å';
        let result = '';
        let num = parseInt(number);

        // Millionlar
        if (num >= 1000000) {
            const millions = Math.floor(num / 1000000);
            result += convertLessThanThousand(millions) + ' –º–∏–ª–ª–∏–æ–Ω';
            if (millions > 1 && millions < 5) result += '–∞';
            else if (millions >= 5) result += '–æ–≤';
            num %= 1000000;
            if (num > 0) result += ' ';
        }

        // Mingliklar
        if (num >= 1000) {
            const thousand = Math.floor(num / 1000);
            result += convertLessThanThousand(thousand) + ' ';
            if (thousand === 1) result += thousands[1];
            else if (thousand >= 2 && thousand <= 4) result += thousands[2];
            else result += thousands[3];
            num %= 1000;
            if (num > 0) result += ' ';
        }

        // Yuzliklar va qolganlar
        result += convertLessThanThousand(num);
        return result.trim();
    }

    const rubleText = convertRubles(parseInt(rubles));

    // Rubl so'z shaklini aniqlash
    const lastTwoDigits = parseInt(rubles) % 100;
    const lastDigit = parseInt(rubles) % 10;
    let rubleWord = '—Ä—É–±–ª–µ–π';
    if (lastTwoDigits < 10 || lastTwoDigits > 20) {
        if (lastDigit === 1) rubleWord = '—Ä—É–±–ª—å';
        else if (lastDigit >= 2 && lastDigit <= 4) rubleWord = '—Ä—É–±–ª—è';
    }

    return `${rubleText.charAt(0).toUpperCase() + rubleText.slice(1)} ${rubleWord} ${kopecks} –∫–æ–ø–µ–µ–∫`;
}

// HTML sahifa yaratish funksiyasi
function generateHTML(imageBase64, dateText, fullName, amount, amountWords) {
    const formattedAmount = formatAmount(amount);
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; height: 100vh; overflow: hidden; }
        .container {
            position: relative;
            width: ${imgWidthPx}px;
            height: ${imgHeightPx}px;
            background-image: url('${imageBase64}');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }
        .overlay {
            position: absolute;
            color: black;
            text-align: left;
            line-height: 1.2;
        }
        #date {
            top: 101px;
            left: 42px;
            font-size: 29px;
            padding: 4px 30px 4px 0;
            letter-spacing: 0.2px;
            background: #ffffff;
        }
        #name, #nameTwo {
            font-size: 34px;
            background: #ffffff;
            padding: 3px 0 38px 0;
            letter-spacing: 1px;
            width: 71%;
            left: 42px;
        }
        #name { top: 297px; }
        #nameTwo { top: 35.9%; }
        #amount, #amountTwo {
            font-size: 31px;
            background: #ffffff;
            padding: 4px 0 4px 1px;
            letter-spacing: 1px;
            width: 71%;
            left: 42px;
            font-family: 'Roboto', sans-serif;
            font-weight: 400;
        }
        #amount { bottom: 596px; }
        #amountTwo { bottom: 395px; }
        #amountText {
            bottom: 267px;
            left: 42.3px;
            font-size: 34px;
            background: #ffffff;
            padding: 3px 0 0 0;
            width: 84%;
            letter-spacing: -0.2px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="overlay" id="date">${dateText}</div>
        <div class="overlay" id="name">${fullName.toUpperCase()}</div>
        <div class="overlay" id="nameTwo">${fullName.toUpperCase()}</div>
        <div class="overlay" id="amount">${formattedAmount}</div>
        <div class="overlay" id="amountTwo">${formattedAmount}</div>
        <div class="overlay" id="amountText">${amountWords}</div>
    </div>
</body>
</html>`;
}

// /start komandasi
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    sessions.set(chatId, {});

    const welcomeMessage = languages.uz.selectLanguage;
    bot.sendMessage(chatId, welcomeMessage, createLanguageKeyboard());
});

// Callback query handler (til tanlash)
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data.startsWith('lang_')) {
        const selectedLang = data.split('_')[1];
        const session = sessions.get(chatId) || {};
        session.language = selectedLang;
        sessions.set(chatId, session);

        const lang = languages[selectedLang];

        // Xabarni o'chirish va yangi xabar yuborish
        bot.deleteMessage(chatId, callbackQuery.message.message_id);
        bot.sendMessage(chatId, lang.langSelected, { parse_mode: 'HTML' });

        // Callback query ni javob berish
        bot.answerCallbackQuery(callbackQuery.id);
    }
});

// Foydalanuvchi rasmli hujjat yuborganda
bot.on('document', async (msg) => {
    const chatId = msg.chat.id;
    const doc = msg.document;
    const session = sessions.get(chatId);

    if (!session || !session.language) {
        return bot.sendMessage(chatId, "üåê Avval tilni tanlang!\n\n/start ni bosing", { parse_mode: 'HTML' });
    }

    const lang = languages[session.language];

    if (!doc.file_name.startsWith('–î–æ–∫—É–º–µ–Ω—Ç-')) {
        return bot.sendMessage(chatId, lang.invalidFile + lang.restart, { parse_mode: 'HTML' });
    }

    try {
        // "Fayl yuklanmoqda" xabari
        const processingMsg = await bot.sendMessage(chatId, "üì• <b>Fayl yuklanmoqda...</b>", { parse_mode: 'HTML' });

        const fileUrl = await bot.getFileLink(doc.file_id);
        const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
        const filePath = path.join(tempDir, `temp_${chatId}.jpg`);
        fs.writeFileSync(filePath, response.data);

        session.filePath = filePath;
        sessions.set(chatId, session);

        // Yuklash xabarini o'chirish
        bot.deleteMessage(chatId, processingMsg.message_id);

        bot.sendMessage(chatId, lang.fileAccepted, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('Document processing error:', error);
        bot.sendMessage(chatId, lang.error + lang.restart, { parse_mode: 'HTML' });
    }
});

// Matnli xabarlarni qayta ishlash
bot.on('message', async (msg) => {
    // Komanda va callback query'larni o'tkazib yuborish
    if (msg.text && msg.text.startsWith('/')) return;
    if (msg.document) return;

    const chatId = msg.chat.id;
    const session = sessions.get(chatId);

    if (!session || !session.language || !session.filePath) return;

    const lang = languages[session.language];

    try {
        if (!session.month) {
            session.month = msg.text;
            sessions.set(chatId, session);
            return bot.sendMessage(chatId, lang.enterName, { parse_mode: 'HTML' });
        } else if (!session.fullName) {
            session.fullName = msg.text;
            sessions.set(chatId, session);
            return bot.sendMessage(chatId, lang.enterAmount, { parse_mode: 'HTML' });
        } else if (!session.amount) {
            session.amount = msg.text;
            sessions.set(chatId, session);

            // Processing xabari
            const processingMsg = await bot.sendMessage(chatId, lang.processing, { parse_mode: 'HTML' });

            const browser = await puppeteer.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            const amountWords = convertNumberToWords(session.amount);
            const htmlContent = generateHTML(base64DefaultImage, session.month, session.fullName, session.amount, amountWords);

            await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
            await page.setViewport({ width: imgWidthPx, height: imgHeightPx });

            // dateText ni tahlil qilib fayl nomini shakllantirish
            const formattedDate = parseDateText(session.month);
            const pdfPath = path.join(tempDir, `–î–æ–∫—É–º–µ–Ω—Ç-${formattedDate}.pdf`);
            await page.pdf({
                path: pdfPath,
                width: `${pageWidthIn}in`,
                height: `${pageHeightIn}in`,
                printBackground: true,
                margin: { top: 0, right: 0, bottom: 0, left: 0 }
            });

            await browser.close();

            // Processing xabarini o'chirish
            bot.deleteMessage(chatId, processingMsg.message_id);

            await bot.sendDocument(chatId, pdfPath, {}, { contentType: 'application/pdf' });
            bot.sendMessage(chatId, lang.success, { parse_mode: 'HTML' });

            // Vaqtinchalik fayllarni o'chirish
            fs.unlinkSync(session.filePath);
            fs.unlinkSync(pdfPath);
            sessions.delete(chatId);
        }
    } catch (error) {
        console.error('Message processing error:', error);
        bot.sendMessage(chatId, lang.error + lang.restart, { parse_mode: 'HTML' });
    }
});

// /help komandasi
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpText = `
ü§ñ <b>Bot haqida ma'lumot:</b>

üìã <b>Vazifasi:</b> Patent to'lov cheklarini yaratish

üîß <b>Qanday ishlaydi:</b>
1Ô∏è‚É£ Eski patent chekingizni PDF formatida yuboring
2Ô∏è‚É£ To'lov sanasini kiriting 
3Ô∏è‚É£ To'liq ismingizni yozing
4Ô∏è‚É£ To'lov summasini kiriting
5Ô∏è‚É£ Tayyor chekni oling!

üåê <b>Tillari:</b> O'zbek va Rus tillari

‚ö° <b>Boshlash:</b> /start

üë®‚Äçüíª <b>Yordam:</b> /help
    `;
    bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
});

// Xatoliklarni ushlash
process.on('uncaughtException', (error) => {
    console.error('üö® Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason) => {
    console.error('üö® Unhandled Rejection:', reason);
});

// Bot ishga tushganini xabar berish
console.log('üöÄ Bot muvaffaqiyatli ishga tushdi!');
console.log('üåê Til qo\'llab-quvvatlash: O\'zbek va Rus');
console.log('üìÑ PDF cheklar yaratishga tayyor!');
console.log('‚è∞ Ishga tushgan vaqt:', new Date().toLocaleString());





// Webhook endpoint
app.post('/api/telegram', (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// Start server for Vercel
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});
module.exports = app;






// const TelegramBot = require('node-telegram-bot-api');
// const fs = require('fs');
// const puppeteer = require('puppeteer');
// const path = require('path');
// const { imageSize } = require('image-size');
// const axios = require('axios');
// require('dotenv').config();

// // Telegram botni ishga tushirish
// const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
// const sessions = new Map();

// // Default rasm (fon) o‚Äòlchamlarini olish
// const defaultImagePath = path.join(__dirname, 'img', '–î–æ–∫—É–º–µ–Ω—Ç.jpg');
// const defaultImageBuffer = fs.readFileSync(defaultImagePath);
// const base64DefaultImage = `data:image/jpeg;base64,${defaultImageBuffer.toString('base64')}`;

// const dimensions = imageSize(defaultImageBuffer);
// const imgWidthPx = dimensions.width;
// const imgHeightPx = dimensions.height;
// const pxToInch = (px) => px / 96;
// const pageWidthIn = pxToInch(imgWidthPx);
// const pageHeightIn = pxToInch(imgHeightPx);

// // PDF fayllar uchun vaqtinchalik papka
// const tempDir = path.join(__dirname, 'temp_pdfs');
// if (!fs.existsSync(tempDir)) {
//     fs.mkdirSync(tempDir, { recursive: true });
// }

// // dateText ni tahlil qilib YYYY-MM-DD-HH_MM_SS formatiga o‚Äòtkazish
// function parseDateText(dateText) {
//     const months = {
//         '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
//         '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
//         '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
//     };

//     // Masalan: "11 –∏—é–ª—è 2025 16:17:50 –º—Å–∫"
//     const regex = /^(\d{1,2})\s+(\S+)\s+(\d{4})\s+(\d{2}):(\d{2}):(\d{2})\s+–º—Å–∫$/;
//     const match = dateText.match(regex);

//     if (!match) {
//         throw new Error('Invalid date format');
//     }

//     const [, day, monthText, year, hours, minutes, seconds] = match;
//     const month = months[monthText.toLowerCase()];
//     if (!month) {
//         throw new Error('Invalid month name');
//     }

//     // YYYY-MM-DD-HH_MM_SS formatida qaytarish
//     return `${year}-${month}-${day.padStart(2, '0')}-${hours}_${minutes}_${seconds}`;
// }

// // Summani formatlash (17 000 shaklida)
// function formatAmount(amount) {
//     const cleanAmount = amount.replace(' ‚ÇΩ', '').replace(',', '.');
//     const [rubles, kopecks = '00'] = cleanAmount.split('.');
//     const formattedRubles = parseInt(rubles).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
//     return `${formattedRubles}${kopecks ? ',' + kopecks.padEnd(2, '0') : ''} ‚ÇΩ`;
// }

// // Summani so‚Äòzga aylantirish
// function convertNumberToWords(amount) {
//     const [rubles, kopecks = '00'] = amount.replace(' ‚ÇΩ', '').replace(',', '.').split('.');

//     // So‚Äòz shaklidagi sonlar uchun lug‚Äòatlar
//     const ones = [
//         '', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å',
//         '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',
//         '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'
//     ];
//     const tens = ['', '', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'];
//     const hundreds = ['', '—Å—Ç–æ', '–¥–≤–µ—Å—Ç–∏', '—Ç—Ä–∏—Å—Ç–∞', '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', '–ø—è—Ç—å—Å–æ—Ç', '—à–µ—Å—Ç—å—Å–æ—Ç', '—Å–µ–º—å—Å–æ—Ç', '–≤–æ—Å–µ–º—å—Å–æ—Ç', '–¥–µ–≤—è—Ç—å—Å–æ—Ç'];
//     const thousands = ['', '—Ç—ã—Å—è—á–∞', '—Ç—ã—Å—è—á–∏', '—Ç—ã—Å—è—á'];

//     function convertLessThanThousand(number) {
//         if (number === 0) return '';
//         if (number < 20) return ones[number];
//         if (number < 100) {
//             const ten = Math.floor(number / 10);
//             const rest = number % 10;
//             return `${tens[ten]}${rest ? ' ' + ones[rest] : ''}`;
//         }
//         const hundred = Math.floor(number / 100);
//         const rest = number % 100;
//         return `${hundreds[hundred]}${rest ? ' ' + convertLessThanThousand(rest) : ''}`.trim();
//     }

//     function convertRubles(number) {
//         if (number === 0) return '–Ω–æ–ª—å';
//         let result = '';
//         let num = parseInt(number);

//         // Millionlar
//         if (num >= 1000000) {
//             const millions = Math.floor(num / 1000000);
//             result += convertLessThanThousand(millions) + ' –º–∏–ª–ª–∏–æ–Ω';
//             if (millions > 1 && millions < 5) result += '–∞';
//             else if (millions >= 5) result += '–æ–≤';
//             num %= 1000000;
//             if (num > 0) result += ' ';
//         }

//         // Mingliklar
//         if (num >= 1000) {
//             const thousand = Math.floor(num / 1000);
//             result += convertLessThanThousand(thousand) + ' ';
//             if (thousand === 1) result += thousands[1];
//             else if (thousand >= 2 && thousand <= 4) result += thousands[2];
//             else result += thousands[3];
//             num %= 1000;
//             if (num > 0) result += ' ';
//         }

//         // Yuzliklar va qolganlar
//         result += convertLessThanThousand(num);
//         return result.trim();
//     }

//     const rubleText = convertRubles(parseInt(rubles));
//     const kopeckText = kopecks.padStart(2, '0');

//     // Rubl so‚Äòz shaklini aniqlash
//     const lastTwoDigits = parseInt(rubles) % 100;
//     const lastDigit = parseInt(rubles) % 10;
//     let rubleWord = '—Ä—É–±–ª–µ–π';
//     if (lastTwoDigits < 10 || lastTwoDigits > 20) {
//         if (lastDigit === 1) rubleWord = '—Ä—É–±–ª—å';
//         else if (lastDigit >= 2 && lastDigit <= 4) rubleWord = '—Ä—É–±–ª—è';
//     }

//     return `${rubleText.charAt(0).toUpperCase() + rubleText.slice(1)} ${rubleWord} ${kopeckText} –∫–æ–ø–µ–µ–∫`;
// }

// // HTML sahifa yaratish funksiyasi
// function generateHTML(imageBase64, dateText, fullName, amount, amountWords) {
//     const formattedAmount = formatAmount(amount);
//     return `
// <!DOCTYPE html>
// <html>
// <head>
//     <meta charset="UTF-8">
//     <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;600;700&display=swap" rel="stylesheet">
//     <style>
//         * { margin: 0; padding: 0; box-sizing: border-box; }
//         body { font-family: Arial, sans-serif; height: 100vh; overflow: hidden; }
//         .container {
//             position: relative;
//             width: ${imgWidthPx}px;
//             height: ${imgHeightPx}px;
//             background-image: url('${imageBase64}');
//             background-size: cover;
//             background-repeat: no-repeat;
//             background-position: center;
//         }
//         .overlay {
//             position: absolute;
//             color: black;
//             text-align: left;
//             line-height: 1.2;
//         }
//         #date {
//             top: 101px;
//             left: 42px;
//             font-size: 29px;
//             padding: 4px 30px 4px 0;
//             letter-spacing: 0.2px;
//             background: #ffffff;
//         }
//         #name, #nameTwo {
//             font-size: 34px;
//             background: #ffffff;
//             padding: 3px 0 38px 0;
//             letter-spacing: 1px;
//             width: 71%;
//             left: 42px;
//         }
//         #name { top: 297px; }
//         #nameTwo { top: 35.9%; }
//         #amount, #amountTwo {
//             font-size: 31px;
//             background: #ffffff;
//             padding: 4px 0 4px 1px;
//             letter-spacing: 1px;
//             width: 71%;
//             left: 42px;
//             font-family: 'Roboto', sans-serif;
//             font-weight: 400;
//         }
//         #amount { bottom: 596px; }
//         #amountTwo { bottom: 395px; }
//         #amountText {
//             bottom: 267px;
//             left: 42.3px;
//             font-size: 34px;
//             background: #ffffff;
//             padding: 3px 0 0 0;
//             width: 84%;
//             letter-spacing: -0.2px;
//         }
//     </style>
// </head>
// <body>
//     <div class="container">
//         <div class="overlay" id="date">${dateText}</div>
//         <div class="overlay" id="name">${fullName.toUpperCase()}</div>
//         <div class="overlay" id="nameTwo">${fullName.toUpperCase()}</div>
//         <div class="overlay" id="amount">${formattedAmount}</div>
//         <div class="overlay" id="amountTwo">${formattedAmount}</div>
//         <div class="overlay" id="amountText">${amountWords}</div>
//     </div>
// </body>
// </html>`;
// }

// // /start komandasi
// bot.onText(/\/start/, (msg) => {
//     const chatId = msg.chat.id;
//     sessions.set(chatId, {});
//     bot.sendMessage(chatId, 'ü§ñ Assalomu alaykum!\n\nüìã Eski patent chekingizni yuborin.\n‚ö†Ô∏è PDF file da bulishi shart.');
// });

// // Foydalanuvchi rasmli hujjat yuborganda
// bot.on('document', async (msg) => {
//     const chatId = msg.chat.id;
//     const doc = msg.document;

//     if (!doc.file_name.startsWith('–î–æ–∫—É–º–µ–Ω—Ç-')) {
//         return bot.sendMessage(chatId, '‚ùå Siz yuborgan chek patent tulovi emas!');
//     }

//     try {
//         const fileUrl = await bot.getFileLink(doc.file_id);
//         const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
//         const filePath = path.join(tempDir, `temp_${chatId}.jpg`);
//         fs.writeFileSync(filePath, response.data);

//         sessions.set(chatId, { filePath });
//         bot.sendMessage(chatId, '‚úÖ Fayl chek qabul qilindi.\n\nüìÖ Qaysi oy uchun to‚Äòlov qilmoqchisiz? (Masalan: 11 –∏—é–ª—è 2025 16:17:50 –º—Å–∫)');
//     } catch (error) {
//         console.error('Document processing error:', error);
//         bot.sendMessage(chatId, '‚ùå Faylni qayta ishlashda xatolik yuz berdi. Iltimos, qayta urinib ko‚Äòring.');
//     }
// });

// // Matnli xabarlarni qayta ishlash
// bot.on('message', async (msg) => {
//     const chatId = msg.chat.id;
//     const session = sessions.get(chatId);

//     if (!session || !session.filePath) return;

//     try {
//         if (!session.month) {
//             session.month = msg.text;
//             return bot.sendMessage(chatId, 'üë§ Familya Ism Otchestvani kiriting:');
//         } else if (!session.fullName) {
//             session.fullName = msg.text;
//             return bot.sendMessage(chatId, 'üí∞ To‚Äòlov summasini kiriting (masalan: 8 900,00 ‚ÇΩ):');
//         } else if (!session.amount) {
//             session.amount = msg.text;

//             const browser = await puppeteer.launch({ headless: true });
//             const page = await browser.newPage();
//             const amountWords = convertNumberToWords(session.amount);
//             const htmlContent = generateHTML(base64DefaultImage, session.month, session.fullName, session.amount, amountWords);

//             await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
//             await page.setViewport({ width: imgWidthPx, height: imgHeightPx });

//             // dateText ni tahlil qilib fayl nomini shakllantirish
//             const formattedDate = parseDateText(session.month);
//             const pdfPath = path.join(tempDir, `–î–æ–∫—É–º–µ–Ω—Ç-${formattedDate}.pdf`);
//             await page.pdf({
//                 path: pdfPath,
//                 width: `${pageWidthIn}in`,
//                 height: `${pageHeightIn}in`,
//                 printBackground: true,
//                 margin: { top: 0, right: 0, bottom: 0, left: 0 }
//             });

//             await browser.close();

//             await bot.sendDocument(chatId, pdfPath, {}, { contentType: 'application/pdf' });
//             bot.sendMessage(chatId, '‚úÖ PDF chek tayyor!');

//             fs.unlinkSync(session.filePath);
//             fs.unlinkSync(pdfPath);
//             sessions.delete(chatId);
//         }
//     } catch (error) {
//         console.error('Message processing error:', error);
//         bot.sendMessage(chatId, '‚ùå Xatolik yuz berdi. Qayta urinib ko‚Äòring.');
//     }
// });

// // Xatoliklarni ushlash
// process.on('uncaughtException', (error) => console.error('Uncaught Exception:', error));
// process.on('unhandledRejection', (reason) => console.error('Unhandled Rejection:', reason));

// console.log('ü§ñ Bot ishga tushdi. PDF fayllar yaratishga tayyor.');

